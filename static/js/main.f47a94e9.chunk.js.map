{"version":3,"sources":["components/Header.js","components/Icon.js","components/PlayButton.js","pages/Main.js","components/AppShell.js","App.js","serviceWorker.js","index.js"],"names":["children","Header","styled","h1","iconSize","css","props","medium","getIconSrc","name","span","PlayButton","PlayButtonStyle","Icon","div","Main","createGlobalStyle","App","AppShell","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8WAGe,kBAAyB,IAAbA,EAAY,EAAZA,SACzB,OAAO,kBAAC,EAAD,KAASA,IAGZC,EAASC,IAAOC,GAAV,K,kUCJZ,IAAMC,EAAWC,YAAH,KACH,SAAAC,GAAK,OAAIA,EAAMC,OAAN,mBACR,SAAAD,GAAK,OAAIA,EAAMC,OAAN,mBAGfC,EAAaH,YAAH,KACd,YAAe,IAAZI,EAAW,EAAXA,KACD,MAAa,aAATA,EACI,+CACU,oBAATA,EACD,sDAEN,6BAISP,MAAOQ,KAAtB,IACIN,EAGAI,G,8UCnBW,SAASG,EAAT,GAAmC,IAAbX,EAAY,EAAZA,SACnC,OAAO,kBAACY,EAAD,KAAiB,kBAACC,EAAD,CAAMJ,KAAK,aAAcT,GAGnD,IAAMY,EAAkBV,IAAOY,IAAV,KCJN,SAASC,IACtB,OAAO,oCACL,kBAACd,EAAD,sBACA,kBAACU,EAAD,2BACA,kBAACA,EAAD,2BACA,kBAACA,EAAD,2BACA,kBAACA,EAAD,4B,ubCRWK,kBAAf,KCWeC,MATf,WACE,OACE,oCACE,kBAACC,EAAD,MACA,kBAACH,EAAD,QCIcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f47a94e9.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport default function ({ children }) {\n  return <Header>{children}</Header>;\n}\n\nconst Header = styled.h1`\n  text-align: center;\n  font-size: 3rem;\n  padding: 1rem;\n  background-color: #730202;\n`;","import styled, { css } from 'styled-components';\nimport { black } from 'ansi-colors';\n\nconst iconSize = css`\n  width: ${props => props.medium ? `6rem` : `4.5rem`};\n  height: ${props => props.medium ? `6rem` : `4.5rem`};\n`;\n\nconst getIconSrc = css`\n${({ name }) => {\n    if (name === 'iconPlay')\n      return `background-image: url(/assets/playIcon.svg);`\n    else if (name === 'iconPlay--white')\n      return `background-image: url(/assets/playIcon--white.svg);`\n    else\n      return `background-color: black`;\n  }}\n`;\n\nexport default styled.span`\n  ${iconSize}\n  display: inline-block;\n  background-size: cover;\n  ${getIconSrc}\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport Icon from './Icon';\n\nexport default function PlayButton({ children }) {\n  return <PlayButtonStyle><Icon name='iconPlay' />{children}</PlayButtonStyle>\n}\n\nconst PlayButtonStyle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #F2B731;\n  font-size: 2rem;\n  text-align: center;\n  margin: 3rem 2rem;\n  margin-bottom: 0;\n  padding: 1.5rem 0;\n  border: .1rem solid;\n\n  span {\n    margin-right: 1rem;\n  }\n`;","import React from 'react';\nimport Header from '../components/Header';\nimport PlayButton from '../components/PlayButton';\n\nexport default function Main() {\n  return <>\n    <Header>Sons Budistas</Header>\n    <PlayButton>Prece das 7 Linhas</PlayButton>\n    <PlayButton>Prece das 7 Linhas</PlayButton>\n    <PlayButton>Prece das 7 Linhas</PlayButton>\n    <PlayButton>Prece das 7 Linhas</PlayButton>\n  </>;\n}","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: inherit;\n}\n\nhtml {\n  font-size: 62.5%;\n}\nbody {\n  font-family: \"Lato\", sans-serif;\n  font-weight: 400;\n  /* font-size: 16px; */\n  line-height: 1.7;\n  color: #F2F2F2;\n  box-sizing: border-box;\n  background-color: #4D0202;\n}\n\n#root {\n  display: flex;\n  flex-direction: column;\n}\n`;","import React from 'react';\nimport Main from './pages/Main';\nimport AppShell from './components/AppShell';\n\nfunction App() {\n  return (\n    <>\n      <AppShell />\n      <Main />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}