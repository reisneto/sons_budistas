{"version":3,"sources":["components/Header.js","components/Icon.js","pages/SongPage.js","components/AppShell.js","utils/soundPlayerManager.js","components/PlayButton.js","utils/timeFormatter.js","components/SoundPlayer.js","pages/SongListPage.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["children","Header","styled","h1","iconSize","css","props","medium","getIconSrc","name","closeIcon","close","span","Song","songPage","setSongPage","SongStyle","isActive","item","title","Icon","className","onClick","prev","description","div","createGlobalStyle","currentTrackMetadata","setCurrentTrackMetadata","newCurrentTrackMetadata","itemId","id","soundPlayer","soundPlayerRef","current","activeItem","src","load","play","ended","paused","pause","activeItemId","PlayButton","useContext","CurrentTrackContext","PlayButtonStyle","soundPlayerManager","twoDigitsTime","t","String","duration","timeText","currentTime","Math","floor","hours","getHour","minutes","getMinutes","seconds","response","useState","setCurrentTime","useEffect","interval","setInterval","timeFormatter","clearInterval","SoundPlayer","SongListPage","songs","data","map","song","key","createContext","CurrentTrackProvider","useRef","Audio","Provider","value","Main","AppShell","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.027d40a0.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport default function ({ children }) {\n  return <Header>{children}</Header>;\n}\n\nconst Header = styled.h1`\n  text-align: center;\n  font-size: 3rem;\n  padding: 1rem;\n  background-color: #730202;\n`;","import styled, { css } from 'styled-components';\n\nconst iconSize = css`\n  width: ${props => props.medium ? `6rem` : `4.5rem`};\n  height: ${props => props.medium ? `6rem` : `4.5rem`};\n`;\n\nconst getIconSrc = css`\n${({ name }) => {\n    return `background-image: url(./assets/${name}.svg);`\n  }}\n`;\n\nconst closeIcon = css`\n${ ({ close }) => {\n    return close ? `\n    position: absolute;\n    top: 12px;\n    right: 10px;\n  ` : '';\n  }}\n`;\n\nexport default styled.span`\n  ${iconSize}\n  display: inline-block;\n  background-size: cover;\n  ${getIconSrc}\n  ${closeIcon}\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport Header from '../components/Header';\nimport Icon from '../components/Icon';\n\nexport default function Song({ songPage, setSongPage }) {\n  return <SongStyle isActive={songPage.isActive}>\n    <Header> {songPage.item.title} </Header>\n    <Icon close={true} className='topRight'\n      onClick={() => setSongPage(prev => ({ ...prev, isActive: !prev.isActive }))}\n      name={'iconClose--white'}\n    />\n    <pre className='paragraph'>{songPage.item.description}</pre>\n  </SongStyle>\n}\n\nconst SongStyle = styled.div`\n  background-color: #4D0202;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  position: absolute;\n  display: flex;\n  flex-flow: column wrap;\n  left: 0;\n  top: 0;\n  z-index: 10;\n  transition: transform .4s;\n  transform: translateX(${ props => props.isActive ? '0' : '200vw'});\n  .paragraph {\n    max-width: 500px;\n    width: 100%;\n    font-size: 1.2rem;\n    text-align: center;\n    font-family: fantasy;\n    line-height: 3rem;\n    padding: 10px;\n    letter-spacing: 1px;\n  }\n`;\n\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: inherit;\n}\n\nhtml {\n  font-size: 62.5%;\n}\nbody {\n  font-family: \"Lato\", sans-serif;\n  font-weight: 400;\n  /* font-size: 16px; */\n  line-height: 1.7;\n  color: #F2F2F2;\n  box-sizing: border-box;\n  background-color: #4D0202;\n}\n\n#root {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n}\n`;","export default {\n  toggleSoundTrack: function (currentTrackMetadata, setCurrentTrackMetadata, item = null) {//item null means soundPlayer fired this function\n    const newCurrentTrackMetadata = { ...currentTrackMetadata };\n    const itemId = item ? +item.id : null;\n    const soundPlayer = newCurrentTrackMetadata.soundPlayerRef.current;\n    if (itemId && currentTrackMetadata.activeItem.id !== itemId) {\n      newCurrentTrackMetadata.activeItem = item;\n      soundPlayer.src = `./assets/audios/${item.src}`;\n      soundPlayer.load();\n      soundPlayer.play();\n    } else {//soundPlayer or list\n      newCurrentTrackMetadata.activeItem = item ? item : newCurrentTrackMetadata.activeItem;\n      //check if it started\n      if (!soundPlayer.ended && soundPlayer.paused) {//not played yet --> playing\n        soundPlayer.play();\n      } else if (!soundPlayer.ended && !soundPlayer.paused) {//playing --> pause\n        soundPlayer.pause();\n      }\n      else if (soundPlayer.ended && soundPlayer.paused) { //ended --> not played yet\n        soundPlayer.src = `./assets/audios/${item.src}`;\n        soundPlayer.load();\n      }\n    }\n    setCurrentTrackMetadata({ ...newCurrentTrackMetadata });\n  },\n\n  isPlayIcon: function (activeItemId, paused, itemId) {\n    if (itemId !== activeItemId) return true; //when soundTrack is not being played\n    return paused; //when soundTrack is active, check if its paused\n  }\n}","import React, { useContext } from 'react';\nimport { CurrentTrackContext } from '../pages/Main';\nimport soundPlayerManager from '../utils/soundPlayerManager';\nimport styled from 'styled-components';\nimport Icon from './Icon';\n\nexport default function PlayButton({ setSongPage, item, children }) {\n  const { currentTrackMetadata, setCurrentTrackMetadata } = useContext(CurrentTrackContext);\n  const { activeItem, soundPlayerRef } = currentTrackMetadata;\n  return <PlayButtonStyle\n    onClick={() => setSongPage(prev => ({ item: item, isActive: !prev.isActive }))}>\n    <Icon onClick={() => soundPlayerManager.toggleSoundTrack(currentTrackMetadata, setCurrentTrackMetadata, item)}\n      name={soundPlayerManager.isPlayIcon(activeItem.id, soundPlayerRef.current.paused, item.id) ? 'playIcon' : 'iconPause'}\n    />\n    {children}\n  </PlayButtonStyle>\n}\n\nconst PlayButtonStyle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #F2B731;\n  font-size: 2rem;\n  text-align: center;\n  margin: 3rem 2rem;\n  margin-bottom: 0;\n  padding: 1.5rem 0;\n  border: .1rem solid;\n\n  span {\n    margin-right: 1rem;\n  }\n`;","const SECONDTOMINUTES = 60;\nconst SECONDTOHOURS = 3600;\n\nconst getHour = (t) => Math.floor(t / SECONDTOHOURS);\nconst getMinutes = (t) => Math.floor(t / SECONDTOMINUTES);\nconst textToTime = (t) => Math.floor(+t);\nconst twoDigitsTime = (t) => t >= 10 ? String(t) : `0${t}`;\n\nexport default function (duration, timeText) {\n  let currentTime = textToTime(timeText);\n  const hours = getHour(currentTime);\n  currentTime -= hours * SECONDTOHOURS;\n  const minutes = getMinutes(currentTime);\n  currentTime -= minutes * SECONDTOMINUTES;\n  const seconds = currentTime;\n  let response = `${twoDigitsTime(hours)}:${twoDigitsTime(minutes)}:${twoDigitsTime(seconds)}`;\n  if (duration < SECONDTOHOURS) {\n    response = `${twoDigitsTime(minutes)}:${twoDigitsTime(seconds)}`;\n  }\n\n  return response;\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { CurrentTrackContext } from '../pages/Main';\nimport soundPlayerManager from '../utils/soundPlayerManager';\nimport timeFormatter from '../utils/timeFormatter';\nimport styled from 'styled-components';\nimport Icon from './Icon';\n\nexport default function () {\n  const { currentTrackMetadata, setCurrentTrackMetadata } = useContext(CurrentTrackContext);\n  const [currentTime, setCurrentTime] = useState(currentTrackMetadata.soundPlayerRef.current.currentTime);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(timeFormatter(currentTrackMetadata.soundPlayerRef.current.duration, currentTrackMetadata.soundPlayerRef.current.currentTime));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [currentTrackMetadata.soundPlayerRef]);\n\n  return <SoundPlayer>\n    <Icon onClick={() => soundPlayerManager.toggleSoundTrack(currentTrackMetadata, setCurrentTrackMetadata)} name={currentTrackMetadata.soundPlayerRef.current.paused ? 'playIcon--white' : 'iconPause--white'} />\n    <span>{currentTrackMetadata.activeItem.title}</span>\n    <span>{currentTime}</span>\n  </SoundPlayer>\n}\n\nconst SoundPlayer = styled.div`\n  display: flex;\n  flex-flow: row no-wrap;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  z-index: 100;\n  background-color: #690101;\n  color: #F2F2F2;\n  justify-content: space-between;\n  padding: 3% 5%;\n  font-size: 2.4rem;\n`;","import React from 'react';\nimport Header from '../components/Header';\nimport PlayButton from '../components/PlayButton';\nimport SoundPlayer from '../components/SoundPlayer';\n\nexport default function SongListPage({ setSongPage, songs }) {\n\n  return <>\n    <Header>Sons Budistas</Header>\n    <div>\n      {songs.data.map(song =>\n        <PlayButton setSongPage={setSongPage} key={song.id} item={song}>{song.title}</PlayButton>\n      )}\n    </div>\n    <SoundPlayer />\n  </>\n}\n\n","import React, { createContext, useState, useRef } from 'react';\nimport songs from '../data/songs.json';\nimport SongPage from './SongPage';\nimport AppShell from '../components/AppShell';\nimport SongsListPage from './SongListPage';\n\nexport const CurrentTrackContext = createContext(null);\n\nfunction CurrentTrackProvider(props) {\n  const defaultSrc = './assets/audios/prece7linhas20min.mp3';\n  const soundPlayerRef = useRef(new Audio(defaultSrc));\n\n\n  const [currentTrackMetadata, setCurrentTrackMetadata] = useState({\n    activeItem: { id: 1, src: 'prece7linhas20min.mp3', title: 'Prece das 7 linhas' },\n    ended: false,\n    paused: true,\n    soundPlayerRef\n  });\n\n\n  return <CurrentTrackContext.Provider value={{ currentTrackMetadata, setCurrentTrackMetadata }} {...props}></CurrentTrackContext.Provider>\n}\n\nexport default function Main() {\n  const [songPage, setSongPage] = useState({ isActive: false, item: { ...songs.data[0] } });\n\n  return <CurrentTrackProvider>\n    <AppShell />\n    <SongsListPage setSongPage={setSongPage} songs={songs} />\n    <SongPage songPage={songPage} setSongPage={setSongPage} />\n  </CurrentTrackProvider>\n}","import React from 'react';\nimport Main from './pages/Main';\nimport AppShell from './components/AppShell';\n\nfunction App() {\n  return (\n    <>\n      <AppShell />\n      <Main />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}